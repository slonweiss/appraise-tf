# Create a persistent disk
resource "google_compute_disk" "geoserver_data" {
  name = "geoserver-data-disk"
  type = "pd-standard"
  size = 10
  zone = "us-central1-a"
}

# Create a spot instance VM
resource "google_compute_instance" "geoserver" {
  name         = "geoserver-spot-instance"
  machine_type = "e2-standard-2"
  zone         = "us-central1-a"
  boot_disk {
    initialize_params {
      image = "ubuntu-os-cloud/ubuntu-2004-lts"
      size  = 10
    }
  }
  network_interface {
    subnetwork = "projects/linear-equator-414922/regions/us-central1/subnetworks/appraise-private-network"
    network_ip = "10.128.0.41" 
  }

  metadata_startup_script = <<-EOF
  #!/bin/bash

  # Update packages
  sudo apt-get update

  # Install Java
  sudo apt-get install -y openjdk-17-jdk unzip wget

  # Download and install GeoServer
  if [ ! -d "/opt/geoserver-2.24.1" ]; then
    # Download and install GeoServer
    cd /opt
    wget -O /opt/geoserver-2.24.1-bin.zip "https://sourceforge.net/projects/geoserver/files/GeoServer/2.24.1/geoserver-2.24.1-bin.zip/download"
    unzip -d /opt/geoserver-2.24.1 geoserver-2.24.1-bin.zip
    rm geoserver-2.24.1-bin.zip
  fi
  WEB_XML="/opt/geoserver-2.24.1/webapps/geoserver/WEB-INF/web.xml"
  #"$WEB_XML"

  # Check if modifications have already been applied
  if grep -q "MODIFICATIONS_APPLIED" "$WEB_XML"; then
    echo "Modifications already applied to WEB_XML, skipping"
  else
    # Apply modifications and add a marker
    sed -i '43d;48d;141d;162d;193d;198d' "$WEB_XML"
    echo "<!-- MODIFICATIONS_APPLIED -->" >> "$WEB_XML"
  fi

  # Mount the persistent disk
  sudo mkdir -p /opt/geoserver_data

  # Check if the disk already has an ext4 filesystem
  FS_TYPE=$(sudo blkid -o value -s TYPE /dev/disk/by-id/google-${google_compute_disk.geoserver_data.name})

  if [ "$FS_TYPE" != "ext4" ]; then
    echo "Formatting disk as it does not have an ext4 filesystem"
    # Format the disk only if it does not have an ext4 filesystem
    sudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/disk/by-id/google-${google_compute_disk.geoserver_data.name}
  else
    echo "Disk already formatted with ext4, skipping format step"
  fi  
  sudo mount -o discard,defaults /dev/disk/by-id/google-${google_compute_disk.geoserver_data.name} /opt/geoserver_data
  
  sudo chown -R root:root /opt/geoserver-2.24.1
  sudo chown -R root:root /opt/geoserver_data
  sudo chmod -R 755 /opt/geoserver_data

  # Configure GeoServer data directory
  export GEOSERVER_DATA_DIR="/opt/geoserver_data"

  # Create a systemd service file for GeoServer
  sudo tee /etc/systemd/system/geoserver.service > /dev/null <<EOT
  [Unit]
  Description=GeoServer
  After=network.target

  [Service]
  Type=simple
  User=root
  Environment=GEOSERVER_DATA_DIR=/opt/geoserver_data
  Environment=GEOSERVER_HOME=/opt/geoserver-2.24.1
  ExecStart=/opt/geoserver-2.24.1/bin/startup.sh
  ExecStop=/opt/geoserver-2.24.1/bin/shutdown.sh
  Restart=always

  [Install]
  WantedBy=multi-user.target
  EOT

  # Install the SSL certificate
  sudo mkdir -p /etc/geoserver/ssl
  sudo tee /etc/geoserver/ssl/geoserver.crt > /dev/null <<EOT
  ${acme_certificate.certificate.certificate_pem}
  EOT
  sudo tee /etc/geoserver/ssl/geoserver.key > /dev/null <<EOT
  ${acme_certificate.certificate.private_key_pem}
  EOT

  # Configure Jetty for SSL
  sudo tee /opt/geoserver-2.24.1/etc/start.ini > /dev/null <<EOT
  # SSL
  -- module=ssl
  jetty.ssl.port=8443
  jetty.sslContext.keyStorePath=/etc/geoserver/ssl/geoserver.crt
  jetty.sslContext.keyStorePassword=password
  jetty.sslContext.keyManagerPassword=password
  jetty.sslContext.trustStorePath=/etc/geoserver/ssl/geoserver.crt
  jetty.sslContext.trustStorePassword=password
  -- module=https
  jetty.httpConfig.securePort=8443
  EOT

  # Reload systemd and start the GeoServer service
  sudo systemctl daemon-reload
  sudo systemctl enable geoserver.service
  sudo systemctl start geoserver.service

  EOF
  #scheduling {
  #  preemptible      = true
  #  automatic_restart = false
  #}
  service_account {
    scopes = ["storage-ro"]
  }
  tags = ["geoserver-iap", "geoserver-cloudrun"]
  # Attach the persistent disk to the VM
  attached_disk {
    source      = google_compute_disk.geoserver_data.self_link
    device_name = google_compute_disk.geoserver_data.name
  }
}
